import datetime
import logging
import os

import aiofiles
from aiogram import types, Router, F, Bot, flags
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile
from aiogram.utils.callback_answer import CallbackAnswer
from aiogram.utils.markdown import hbold
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from aiogram.utils.formatting import as_list, as_marked_section, Bold

from AiogramPackage.TGFilters.BOTFilter import BOTFilterChatType, BOTFilterFinList
from AiogramPackage.TGAlchemy.TGDbQueriesProd import db_get_prod

callback_router = Router()
callback_router.message.filter(BOTFilterChatType(["private"]))


@callback_router.callback_query(F.data.startswith("get_prod_info_"), BOTFilterFinList())
async def get_prod_info(callback: types.CallbackQuery, session: AsyncSession):
    prod_id = callback.data[14:]
    prod_data = await db_get_prod(prod_id=prod_id, session=session)
    prod_description = prod_data.description
    # await callback.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {prod_description}", show_alert=True)
    await callback.message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {prod_description}")

@callback_router.callback_query(F.data.startswith("rep_fin_profit_"), BOTFilterFinList())
async def get_rep_fin_profit(callback: types.CallbackQuery, session: AsyncSession):
    extra_data = callback.data[15:]
    try:
        from MoiSkladPackage.MSControllers.MSGSControllerAsync import MSGSControllerAsync
        controller = MSGSControllerAsync()
        res_dict = await controller.save_profit_gs_daily_async()
        print(f"{res_dict=}")
    except Exception as e:
        msg = f"Can't form daily profit report, Error:\n {e}"
        logging.warning(msg)
        await callback.answer("üÜò–û—à–∏–±–∫–∞!")
        await callback.message.answer(msg)
    else:
        gs_href = res_dict.get("info").get("gs_href")
        total = res_dict.get("info").get("total")
        await callback.answer(f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ üí∏–ø—Ä–∏–±—ã–ª–∏ {extra_data}:")
        await callback.message.answer(f"<a href='{gs_href}'>üí∏–ü—Ä–∏–±—ã–ª—å –ø–æ –º–µ—Å—è—Ü—É: {int(total)}—Ä—É–±..</a>")

@callback_router.callback_query(F.data.startswith("rep_fin_balance_"), BOTFilterFinList())
# @flags.callback_answer(pre=False, cache_time=60)
async def get_rep_bal(callback: types.CallbackQuery, callback_answer: CallbackAnswer):
    extra_data = callback.data[16:]
    try:
        from MoiSkladPackage.MSControllers.MSGSControllerAsync import MSGSControllerAsync
        controller = MSGSControllerAsync()
        res_dict = await controller.save_balance_gs_async()
        print(f"{res_dict=}")
    except Exception as e:
        msg = f"Can't form balance report, Error:\n {e}"
        logging.warning(msg)
        await callback.answer("üÜò–û—à–∏–±–∫–∞!", cache_time=60)
        await callback.message.answer(msg)
    else:
        gs_href = res_dict.get("info").get("gs_href")
        total = res_dict.get("info").get("total")
        await callback.answer(f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ ‚öñÔ∏è–±–∞–ª–∞–Ω—Å–∞–º {extra_data}:", cache_time=60)
        await callback.message.answer(f"<a href='{gs_href}'>–ò—Ç–æ–≥–æ–≤—ã–π ‚öñÔ∏è–±–∞–ª–∞–Ω—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {int(total)}—Ä—É–±.</a>")

@callback_router.callback_query(F.data.startswith("rep_fin_debt_"), BOTFilterFinList())
async def get_rep_debt(callback: types.CallbackQuery):
    extra_data = callback.data[13:]
    try:
        from MoiSkladPackage.MSControllers.MSGSControllerAsync import MSGSControllerAsync
        controller = MSGSControllerAsync()
        res_dict = await controller.save_daily_debt_gs_async()
    except Exception as e:
        msg = f"Can't form debt report, Error:\n {e}"
        logging.warning(msg)
        await callback.answer("–û—à–∏–±–∫–∞!")
        await callback.message.answer(msg)
    else:
        gs_href = res_dict.get("info").get("gs_href")
        total = res_dict.get("info").get("total")
        await callback.answer(f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ üö¨–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è–º {extra_data}:")
        await callback.message.answer(f"<a href='{gs_href}'>üö¨–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {int(total)}—Ä—É–±..</a>")

@callback_router.callback_query(F.data.startswith("rep_fin_margin_"), BOTFilterFinList())
async def get_rep_margins(callback: types.CallbackQuery):
    extra_data = callback.data[15:]
    try:
        from MoiSkladPackage.MSControllers.MSGSControllerAsync import MSGSControllerAsync
        controller = MSGSControllerAsync()
        res_dict = await controller.save_daily_margins_gs_async()
        print(f"{res_dict=}")
    except Exception as e:
        msg = f"Can't form margins report, Error:\n {e}"
        logging.warning(msg)
        await callback.answer("–û—à–∏–±–∫–∞!")
        await callback.message.answer(msg)
    else:
        gs_href = res_dict.get("info").get("gs_href")
        total = res_dict.get("info").get("total")
        await callback.answer(f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ—Ç–≥—Ä—É–∑–∫–∞–º {extra_data}:")
        if total == 0:
            await callback.message.answer(f"<a href='{gs_href}'>üõ†Ô∏è–û—Ç–≥—Ä—É–∑–æ–∫ –º–µ–Ω—å—à–µ 30% –Ω–µ—Ç üî¶</a>")
        else:
            await callback.message.answer(f"<a href='{gs_href}'>üõ†Ô∏è–û—Ç–≥—Ä—É–∑–æ–∫ –º–µ–Ω—å—à–µ 30%: {int(total)}—à—Ç.</a>")
            margins_list = res_dict.get("data")[0]
            for client_dict in margins_list:
                await callback.message.answer(f"{client_dict.get('name')}: {client_dict.get('sale')}—Ä—É–± ({client_dict.get('profitability')}%) \n")


@callback_router.callback_query(F.data.startswith("rep_fin_account_"), BOTFilterFinList())
async def get_rep_account(callback: types.CallbackQuery):
    extra_data = callback.data[16:]
    try:
        from MoiSkladPackage.MSControllers.MSGSControllerAsync import MSGSControllerAsync
        controller = MSGSControllerAsync()
        res_dict = await controller.save_daily_accounts_gs_async()
        print(f"{res_dict=}")
    except Exception as e:
        msg = f"Can't form margins report, Error:\n {e}"
        logging.warning(msg)
        await callback.answer("–û—à–∏–±–∫–∞!")
        await callback.message.answer(msg)
    else:
        gs_href = res_dict.get("info").get("gs_href")
        total = res_dict.get("info").get("total")
        await callback.answer(f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –Ω–∞ —Å—á–µ—Ç–∞—Ö {extra_data}:")
        if total == 0:
            await callback.message.answer(f"<a href='{gs_href}'>üí∞–î–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç–∞—Ö –Ω–µ—Ç üôÖ‚Äç</a>")
        else:
            await callback.message.answer(f"<a href='{gs_href}'>–í—Å–µ–≥–æ üí∞–¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç–∞—Ö: {int(total)}—Ä—É–±..</a>")


@callback_router.callback_query(F.data.startswith("rep_fin_daily_"), BOTFilterFinList())
async def get_rep_daily(callback: types.CallbackQuery):
    extra_data = callback.data[16:]
    today = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    res_msg = str(f"–û—Ç—á–µ—Ç –Ω–∞ {today}\n")
    try:
        from MoiSkladPackage.MSControllers.MSGSControllerAsync import MSGSControllerAsync
        controller = MSGSControllerAsync()
        # 1 string -accounts
        account_res_dict = await controller.save_daily_accounts_gs_async()
        gs_href = account_res_dict.get("info").get("gs_href")
        total = account_res_dict.get("info").get("total")
        res_msg += f"<a href='{gs_href}'>üí∞–î–µ–Ω–µ–≥ –Ω–∞ <b>—Å—á–µ—Ç–∞—Ö:</b> {int(total)}—Ä—É–±.</a>\n"
        # 2 string -debts
        res_dict = await controller.save_daily_debt_gs_async()
        gs_href = res_dict.get("info").get("gs_href")
        total = res_dict.get("info").get("total")
        res_msg += f"<a href='{gs_href}'>üö¨<b>–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å</b> –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {int(total)}—Ä—É–±.</a>\n"
        # 3 string -profit
        res_dict = await controller.save_profit_gs_daily_async()
        gs_href = res_dict.get("info").get("gs_href")
        total = res_dict.get("info").get("total")
        res_msg += f"<a href='{gs_href}'>üí∏<b>–ü—Ä–∏–±—ã–ª—å</b> –ø–æ –º–µ—Å—è—Ü—É: {int(total)}—Ä—É–±.</a>\n"
        # 4 string -balance
        res_dict = await controller.save_balance_gs_async()
        gs_href = res_dict.get("info").get("gs_href")
        total = res_dict.get("info").get("total")
        res_msg += f"<a href='{gs_href}'>–ò—Ç–æ–≥–æ–≤—ã–π ‚öñÔ∏è<b>–ë–∞–ª–∞–Ω—Å</b> –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {int(total)}—Ä—É–±.</a>\n"
        # 5 string - margin sales
        # res_dict = await controller.save_daily_margins_gs_async()
        res_dict = await controller.save_custom_margins_gs_async(from_date="2023-01-9", to_date="2023-01-9")
        gs_href = res_dict.get("info").get("gs_href")
        total = res_dict.get("info").get("total")

        if total == 0:
            res_msg += f"<a href='{gs_href}'>üõ†Ô∏è<b>–û—Ç–≥—Ä—É–∑–æ–∫</b> –º–µ–Ω—å—à–µ 30% –Ω–µ—Ç üî¶</a>"
        else:
            res_msg += f"<a href='{gs_href}'>üõ†Ô∏è<b>–û—Ç–≥—Ä—É–∑–æ–∫</b> –º–µ–Ω—å—à–µ 30%: {int(total)}—à—Ç.</a>\n"
            margins_list = res_dict.get("data")[0]
            temp_str = str()
            for client_dict in margins_list:
                temp_str += f"{client_dict.get('name')}: {client_dict.get('sale')}—Ä—É–± ({client_dict.get('profitability')}%) \n"
            res_msg += temp_str
    except Exception as e:
        msg = f"Can't form margins report, Error:\n {e}"
        logging.warning(msg)
        await callback.answer("–û—à–∏–±–∫–∞!")
        await callback.message.answer(msg)
    else:
        await callback.message.answer(res_msg, cache_time=120)
