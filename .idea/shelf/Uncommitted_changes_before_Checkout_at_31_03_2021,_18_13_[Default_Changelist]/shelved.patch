Index: agents.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf8 -*-\n\"\"\"this module is for sales and purchases books forms\"\"\"\nimport requests\nimport json\nimport configparser\nimport httplib2\nimport apiclient\nfrom oauth2client.service_account import ServiceAccountCredentials\nfrom datetime import datetime\nimport xlsxwriter\n\n\ntry:\n    conf = configparser.ConfigParser()\n    conf.read('agents.ini')\nexcept IndexError:\n    print('cant find .ini file'), Exception\n\ntry:\n    URL = conf['MoiSklad']['URL']\n    URL_TOKEN = conf['MoiSklad']['URL_TOKEN']\n    access_token = conf['MoiSklad']['access_token']\n    header_for_token_auth = {'Authorization': 'Bearer %s' % access_token}\n    url_otgruzka_list = conf['MoiSklad']['url_otgruzka_list']\n    url_customers = conf['MoiSklad']['url_customers']\n    url_payments_list = conf['MoiSklad']['url_payments_list']\n    url_profit_product = conf['MoiSklad']['url_profit_product']\n    saratov_book = conf['GOOGLE']['saratov_book']\n    nsk_book = conf['GOOGLE']['nsk_book']\n    temp_book = conf['GOOGLE']['temp_book']\n    saratov_link = conf['GOOGLE']['saratov_link']\n    nsk_link = conf['GOOGLE']['nsk_link']\n    CREDENTIALS_FILE = conf['GOOGLE']['CREDENTIALS_FILE_MACOS']\n    API_SERVICE_NAME = 'sheets'\n    API_VERSION = 'v4'\n    SCOPES = ['https://www.googleapis.com/auth/spreadsheets']\nexcept IndexError:\n    print('cant load data from .ini file', Exception)\n\ntry:\n    credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE,\n                                                                   ['https://www.googleapis.com/auth/spreadsheets',\n                                                                    'https://www.googleapis.com/auth/drive'])\n    httpAuth = credentials.authorize(httplib2.Http())  # Авторизуемся в системе\n    service = apiclient.discovery.build(API_SERVICE_NAME, API_VERSION, http=httpAuth,\n                                        cache_discovery=False)  # Выбираем работу с таблицами и 4 версию API\nexcept IndexError:\n    print('Cant run google api', Exception)\n\ntoda_y_date = str(datetime.now().strftime(\"%Y-%m-%d\"))\n\n\nclass agents_books():\n    \"\"\"new class for sales and purchases books\"\"\"\n    def __init__(self, agent_name = \"Саратов\"):\n        self.bookName = 'Отчет агента'\n        self.email = 'rustammazhatov@gmail.com'\n        self.sheets = []\n        self.sheets_dict = {}\n        self.today_date = str(datetime.now().strftime(\"%Y%m%d\"))\n        if agent_name == \"Саратов\": self.bookId = saratov_book\n        elif agent_name == \"Новосибирск\": self.bookId = nsk_book\n        else:\n            print('Data was send to Temporary book')\n            self.bookId = temp_book\n\n    def get_sheets_list(self):\n        try:\n            spreadsheet = service.spreadsheets().get(spreadsheetId=self.bookId).execute()\n            sheetList = spreadsheet.get(API_SERVICE_NAME)\n            for sheet in sheetList:\n                self.sheets.append([sheet['properties']['sheetId'], sheet['properties']['title']])\n            return self.sheets\n        except IndexError:\n            print(f'Cant get sheet list of the book', Exception)\n            return [False, False]\n\n    def get_sheets_dict(self):\n        try:\n            spreadsheet = service.spreadsheets().get(spreadsheetId=self.bookId).execute()\n            sheetList = spreadsheet.get(API_SERVICE_NAME)\n            for sheet in sheetList:\n                self.sheets_dict[str(sheet['properties']['sheetId'])] = str(sheet['properties']['title'])\n                self.sheets_dict[str(sheet['properties']['title'])] = str(sheet['properties']['sheetId'])\n            return self.sheets_dict\n        except IndexError:\n            print(f'Cant get sheet list of the book', Exception)\n            return {\"0\": \"NONAME\"}\n\n    def get_sheet_name(self, sheetid = 0):\n        try:\n            a = self.get_sheets_dict()[str(sheetid)]\n            return a\n        except IndexError:\n            print(f'Cant get sheet name in the book', Exception)\n            return 'noname'\n\n    def make_new_sheet(self, new_sheet_name=toda_y_date):\n        try:\n            got_list = self.get_sheets_list()\n            got_list = sorted(got_list, key=lambda y: (y[0], y[1]))\n            new_sheet_id = got_list[-1][0] + 1  # find last id\n            got_sheet_names = [x[1] for x in got_list]  # make list of sheets\n            shift = 0\n            # resolve sheet names conflict by adding _0 _1 _2 _3\n            while new_sheet_name in got_sheet_names:\n                new_sheet_name = f\"{new_sheet_name}_{shift}\"\n                shift += 1\n            request_body = {\n                \"requests\": [{\n                    \"addSheet\": {\n                        \"properties\": {\n                            \"sheetId\": new_sheet_id,\n                            \"title\": new_sheet_name,\n                            \"tabColor\": {\n                                \"red\": 0.01,\n                                \"green\": 0.9,\n                                \"blue\": 0.9\n                            }\n                        }\n                    }\n                }]}\n            new_sheet_req = service.spreadsheets().batchUpdate(\n                spreadsheetId=self.bookId,\n                body=request_body).execute()\n            return [new_sheet_id, new_sheet_name]\n        except IndexError:\n            print('Cant make new sheet in the book', Exception)\n            return [False, False]\n\n    def clear_data_sheet(self, sheetid = 0, clear_range='A1:M1000'):\n        try:\n            sheetName = self.get_sheet_name(sheetid)\n            rangeAll = '{0}!A1:Z'.format(sheetName)\n            work_book = self.bookId\n            request = service.spreadsheets().values().clear(spreadsheetId=work_book, range=rangeAll, body={})\n            response = request.execute()\n            return response\n        except IndexError:\n            print(f'Cant clear {sheetid} sheet', Exception)\n            return Exception\n\n    def append_array(self, work_array, sheetid=0):\n        try:\n            sheetName = self.get_sheet_name(sheetid)\n            rangeAll = '{0}!A1:M1000'.format(sheetName)\n            values =  {'values' : work_array}\n            result = service.spreadsheets().values().append(\n                spreadsheetId=self.bookId, range=rangeAll,\n                valueInputOption='RAW',\n                body=values).execute()\n            return result\n        except IndexError:\n            print('Cant append array to the book', Exception)\n            return Exception\n\nclass moi_sklad():\n    def __init__(self, agent_name = 'Саратов', start_day='2021-02-08', end_day=toda_y_date):\n\n        self.agent_name = agent_name\n        self.start_day = start_day\n        self.end_day = end_day\n        self.payed_demand_data_linked = []\n        self.product_dict = {}\n        self.demands_payed_dict = {}\n        self.skipped_customers_name = ['ООО \"ТРЕЙД-НСК\"', 'ИП Горбунов Алексей Анатольевич', 'биэс ч\\л',\n                                       'ЭРА ч.л.', 'Ульяновск ч\\л']\n        self.sales_arr=[['№ п/п', 'Дата отгрузки', 'Номер отгрузки',\n                        'Наименование покупателя', 'Стоимость продажи', 'Себестоимость',\n                         'Прибыль', 'Оплачено', 'Группа'],\n                        ['1', '2', '3', '4', '5', '6', '7', '8', '9']]\n\n    def get_payments_list(self):\n        \"\"\"Return dict { demand_link : linked_sum}\"\"\"\n        start_day =  self.start_day\n        end_day = self.end_day\n        try:\n            url_filtered = str(\n                f'{url_payments_list}?order=moment,name&filter=moment>={start_day} 00:00:00.000;moment<={end_day} 23:00:00.000')\n            req = requests.get(url=url_filtered, headers=header_for_token_auth)\n            #with open('payments_list.json', 'w') as ff:\n            #    json.dump(req.json(), ff, ensure_ascii=False)\n            try:\n                for payment in req.json()['rows']:\n                    #payment['name'] # number\n                    #payment['moment']  # date\n                    #payment['sum']  # payment sum\n                    try:\n                        x = payment['operations']\n                    except:\n                        continue\n                    for demand in payment['operations']:\n                        if demand['meta']['type'] == \"demand\":\n                            demand_link = demand['meta']['href']\n                            if demand_link not in self.demands_payed_dict.keys():\n                                self.demands_payed_dict[demand_link] = demand['linkedSum']\n                            else:\n                                self.demands_payed_dict[demand_link] += demand['linkedSum']\n            except IndexError:\n                print('Sorry, cant unroll payments list ')\n        except IndexError:\n            print('Sorry, cant get payments list ')\n\n        return self.demands_payed_dict\n\n    def get_profit_by_product_list(self):\n        \"\"\"'''Return dict { prod_link : sale_cost}'''\"\"\"\n        #start_day = self.start_day\n        start_day_for_sales =  self.start_day\n        end_day = self.end_day\n        try:\n            url_filtered = str(f'{url_profit_product}?momentFrom={start_day_for_sales} 00:00:00') # !momentTo doesnt work\n                #f'{url_profit_product}?momentFrom={start_day} 00:00:00;momentTo={end_day} 23:00:00')\n            req = requests.get(url=url_filtered, headers=header_for_token_auth)\n            with open('profit_prod_list.json', 'w') as ff:\n                json.dump(req.json(), ff, ensure_ascii=False)\n            for elem in req.json()['rows']:\n                self.product_dict[elem['assortment']['meta']['href']] = elem['sellCost']/100\n            return self.product_dict\n\n        except IndexError:\n            print('Sorry, cant get products dict ')\n            return False\n\n    def get_positions_costsum(self, positions_link):\n        \"\"\"'''Return cost summ of positions in demand'''\"\"\"\n        pos_cost_sum = 0\n        try:\n            req = requests.get(url=positions_link, headers=header_for_token_auth)\n            #with open('profit_prod_list.json', 'w') as ff:\n            #    json.dump(req.json(), ff, ensure_ascii=False)\n            for position in req.json()['rows']:\n                pos_link = position['assortment']['meta']['href']\n                pos_cost = self.product_dict[pos_link]\n                pos_qty = position['quantity']\n                pos_cost_sum += pos_qty * pos_cost\n        except IndexError:\n            print('Sorry, cant get products dict ')\n        return pos_cost_sum\n\n    def request_customer_data(self, customer_link):\n        \"\"\"return data from facture \"\"\"\n        try:\n            customer_req = requests.get(url=customer_link, headers=header_for_token_auth)\n            customer = customer_req.json()\n            group_request = requests.get(url=customer['group']['meta']['href'], headers=header_for_token_auth)\n            customer_group = group_request.json()['name']\n            customer_data_list = [customer['name'], customer_group]\n            return customer_data_list\n        except IndexError:\n            print(f'Error, cant find the customer {customer_link}', Exception)\n\n    def get_info_from_demand(self, demand_link):\n        \"\"\"Return array [customer_name, demandNo, demandDate, demandSum, demandPayedSum, customerGroup]\"\"\"\n        try:\n            demand_req_json = requests.get(url=demand_link, headers=header_for_token_auth)\n            #with open('demand_structure.json', 'w') as ff:\n            #    json.dump(req.json(), ff, ensure_ascii=False)\n            demand_req = demand_req_json.json()\n            customer_link = demand_req['agent']['meta']['href']\n            customer_req = self.request_customer_data(customer_link)\n            customer_name = customer_req[0]\n            customer_group = customer_req[1]\n            demand_no = demand_req['name']\n            demand_date = demand_req['moment']\n            demand_sum = demand_req['sum']\n            demand_payed_sum = demand_req['payedSum']\n            return [customer_name, demand_no, demand_date, demand_sum, demand_payed_sum, customer_group]\n        except IndexError:\n            print('Sorry, cant get products dict ')\n            return ['NA','NA','NA',0,0]\n\n    def get_sales_list(self):\n        \"\"\"'''get sales list from MS and put it in file .json'''\"\"\"\n        start_day = self.start_day\n        end_day = self.end_day\n        agent_name = self.agent_name\n        data_linked = []\n        doc_sum = 0\n        cost_sum = 0\n        profit_sum = 0\n        payed_sum = 0\n        vatsum = 0\n        position = 0\n        payed_sum2 = 0\n        try:\n            product_profit = self.get_profit_by_product_list()\n            payments = self.get_payments_list()\n            start_day_for_sales = start_day\n            url_filtered = str(\n                f'{url_otgruzka_list}?order=moment,name&filter=moment>={start_day_for_sales} 00:00:00.000;moment<={end_day} 23:00:00.000')\n            req = requests.get(url=url_filtered, headers=header_for_token_auth)\n            self.req_date = str(datetime.now().strftime(\"%Y_%m_%d\"))\n            self.start_day = start_day\n            self.end_day = end_day\n            #file_name = str('sales_book_%s.json' % self.req_date)\n            #with open(file_name, 'w') as ff:\n            #    json.dump(req.json(), ff, ensure_ascii=False)\n\n            \"\"\"prepare data in list format\"\"\"\n            try:\n                sales_json = req.json()\n                for sale in sales_json['rows']:\n                    sale_date_0 = datetime.strptime(str(sale['moment']),'%Y-%m-%d %H:%M:%S.%f').date()\n                    sale_date = sale_date_0.strftime(\"%d.%m.%y\")\n                    sale_name = sale['name']\n                    sale_sum = sale['sum']/100\n                    sale_payed_sum = sale['payedSum']/100\n                    if sale['vatEnabled']: sale_vat = sale['vatSum']/100\n                    else: sale_vat = 0\n                    try:\n                        customer_link = sale['agent']['meta']['href']\n                        customer_data = self.request_customer_data(customer_link)\n                    except:\n                        continue\n\n                    # skip agents\n                    if customer_data[0] in self.skipped_customers_name:\n                        continue\n\n                    # skip non requested groups\n                    if customer_data[1] != agent_name:\n                        continue\n\n\n\n                    try:\n                        payed = payments[sale['meta']['href']]/100\n                    except:\n                        payed = 0\n\n                    positions_in_sale_link = sale['positions']['meta']['href']\n                    sale_cost_sum = self.get_positions_costsum(positions_in_sale_link)\n                    position += 1\n                    doc_sum += sale_sum\n                    vatsum += sale_vat\n                    cost_sum += sale_cost_sum\n                    profit_sum += sale_sum - sale_cost_sum\n                    payed_sum += payed  #sum for payment in requested period\n                    payed_sum2 += sale_payed_sum  # payments for demand\n                    data_linked.append([position, sale_date, sale_name,\n                                        customer_data[0], sale_sum, sale_cost_sum,\n                                        (sale_sum - sale_cost_sum), sale_payed_sum, customer_data[1]])\n\n            except IndexError:\n                print('Error, cant prepare array for sales book ', Exception)\n\n        except IndexError:\n            print('Error, cant get sales list from MS', Exception)\n\n        #data_linked = sorted(data_linked, key=lambda y: (y[1], y[4], y[2]))  # sorting by group and name\n        data_linked = self.sales_arr + data_linked\n        data_linked.append(['', '', '', '',\n                            doc_sum, cost_sum, profit_sum,\n                            payed_sum2, payed_sum])\n        data_linked += self.get_1c_sales_list() \n        return data_linked\n\n    def get_1c_sales_list(self):\n        \"\"\"'''get sales list from MS and put it in file .json'''\"\"\"\n        start_day = self.start_day\n        end_day = self.end_day\n        agent_name = self.agent_name\n        self.payed_demand_data_linked = []\n        doc_sum = 0\n        cost_sum = 0\n        profit_sum = 0\n        payed_sum = 0\n        vatsum = 0\n        position = 0\n        try:\n            payments = self.demands_payed_dict\n            for payment, payment_sum in payments.items():\n                demand_info = self.get_info_from_demand(payment)\n                if demand_info[5] != agent_name: continue\n                demand_date_temp = demand_info[2]\n                demand_date = datetime.strptime(demand_date_temp,'%Y-%m-%d %H:%M:%S.%f')\n                req_date = datetime.strptime(self.start_day,'%Y-%m-%d')\n                # filtered date before requested\n                if demand_date < req_date:\n                    position += 1\n                    self.payed_demand_data_linked.append(\n                        [position, str(demand_date.strftime(\"%d.%m.%Y\")),\n                         demand_info[1], demand_info[0], demand_info[3]/100,\n                         '','',demand_info[4]/100, demand_info[5]]\n                    )\n                else: continue\n        except IndexError:\n            print('Error, cant prepare array for sales book ', Exception)\n        #data_linked = sorted(data_linked, key=lambda y: (y[1], y[4], y[2]))  # sorting by group and name\n        return self.payed_demand_data_linked\n\n\n\ndef get_pfo_agent_report():\n    \"\"\"на четверг сделать выборку по оплатам вывести все оплаченные отгрузки\n    занести платежи в 1С и проверить по тем отгрузкам, есть ли неоплачеенные?\n    надо найти почти 200к отгрузок\n    \"\"\"\n    pfo_report = moi_sklad(agent_name = 'Саратов', start_day='2021-03-01', end_day='2021-03-31')\n    pfo_report_book = agents_books(agent_name = \"Саратов\")\n\n    pfo_report_book.clear_data_sheet()\n    req_list = pfo_report.get_sales_list()\n    workbook = xlsxwriter.Workbook('pfo_report.xlsx')\n    worksheet = workbook.add_worksheet('temporary1')\n    col = 0\n    for row, data in enumerate(req_list):\n        worksheet.write_row(row, col, data)\n    workbook.close()\n    pfo_report_book.append_array(req_list)\n    #print(pfo_report.get_profit_by_product_list())\n    #print(pfo_report.get_positions_costsum('https://online.moysklad.ru/api/remap/1.2/entity/demand/5c1b5f34-69ce-11eb-0a80-05f4002445e1/positions'))\n\n\ndef get_nsk_agent_report():\n    \"\"\"на четверг сделать выборку по оплатам вывести все оплаченные отгрузки\n    занести платежи в 1С и проверить по тем отгрузкам, есть ли неоплачеенные?\n    надо найти почти 200к отгрузок\n    \"\"\"\n    nsk_report = moi_sklad(agent_name = 'Новосибирск', start_day='2021-02-08', end_day='2021-03-30')\n    nsk_report_book = agents_books(agent_name = \"Новосибирск\")\n\n    nsk_report_book.clear_data_sheet()\n    nsk_req_list = nsk_report.get_sales_list()\n    workbook = xlsxwriter.Workbook('nsk_report.xlsx')\n    wsh_name = 'Март'\n    worksheet = workbook.add_worksheet(wsh_name)\n    col = 0\n    for row, data in enumerate(nsk_req_list):\n        worksheet.write_row(row, col, data)\n    workbook.close()\n    nsk_report_book.append_array(nsk_req_list)\n\n\nget_pfo_agent_report()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/agents.py b/agents.py
--- a/agents.py	(revision b8cdbfc7dff7d91f318d05e8d79550a4b19b0058)
+++ b/agents.py	(date 1617203087000)
@@ -203,10 +203,10 @@
 
         return self.demands_payed_dict
 
-    def get_profit_by_product_list(self):
+    def get_profit_by_product_list(self, start_day_for_sales):
         """'''Return dict { prod_link : sale_cost}'''"""
         #start_day = self.start_day
-        start_day_for_sales =  self.start_day
+        #start_day_for_sales =  self.start_day
         end_day = self.end_day
         try:
             url_filtered = str(f'{url_profit_product}?momentFrom={start_day_for_sales} 00:00:00') # !momentTo doesnt work
@@ -284,9 +284,9 @@
         position = 0
         payed_sum2 = 0
         try:
-            product_profit = self.get_profit_by_product_list()
-            payments = self.get_payments_list()
             start_day_for_sales = start_day
+            product_profit = self.get_profit_by_product_list(start_day_for_sales)
+            payments = self.get_payments_list()
             url_filtered = str(
                 f'{url_otgruzka_list}?order=moment,name&filter=moment>={start_day_for_sales} 00:00:00.000;moment<={end_day} 23:00:00.000')
             req = requests.get(url=url_filtered, headers=header_for_token_auth)
@@ -353,7 +353,7 @@
         data_linked.append(['', '', '', '',
                             doc_sum, cost_sum, profit_sum,
                             payed_sum2, payed_sum])
-        data_linked += self.get_1c_sales_list() 
+        data_linked += self.get_1c_sales_list()
         return data_linked
 
     def get_1c_sales_list(self):
Index: bot_log.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Tue Mar 30 15:58:58 2021; 731370983; John; Цены\nTue Mar 30 15:59:04 2021; 731370983; John; Остатки на счетах\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bot_log.txt b/bot_log.txt
--- a/bot_log.txt	(revision ee7971a777e86e956b79213a2f4f4b8433d7e1c6)
+++ b/bot_log.txt	(date 1617109711000)
@@ -1,2 +1,4 @@
 Tue Mar 30 15:58:58 2021; 731370983; John; Цены
 Tue Mar 30 15:59:04 2021; 731370983; John; Остатки на счетах
+Tue Mar 30 16:08:28 2021; 731370983; John; Цены 
+Tue Mar 30 16:08:35 2021; 731370983; John; Просрочка(файл) 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"a907a808-9d59-47ce-9c43-12678287e37b\" name=\"Default Changelist\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/bot_log.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/bot_log.txt\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"windows_ver_main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"IdeDocumentHistory\">\n    <option name=\"CHANGED_PATHS\">\n      <list>\n        <option value=\"$PROJECT_DIR$/__init__.py\" />\n        <option value=\"$PROJECT_DIR$/main.py\" />\n        <option value=\"$PROJECT_DIR$/main_module.py\" />\n        <option value=\"$PROJECT_DIR$/training.py\" />\n        <option value=\"$PROJECT_DIR$/finance.py\" />\n        <option value=\"$PROJECT_DIR$/google_books.ini\" />\n        <option value=\"$PROJECT_DIR$/google_books.py\" />\n        <option value=\"$PROJECT_DIR$/Alex_debt.py\" />\n        <option value=\"$PROJECT_DIR$/TeleBotSerman.py\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectFrameBounds\">\n    <option name=\"x\" value=\"28\" />\n    <option name=\"y\" value=\"119\" />\n    <option name=\"width\" value=\"1412\" />\n    <option name=\"height\" value=\"615\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1p1oSgqnFeO8fpQZtCMMkJeO7x9\" />\n  <component name=\"ProjectView\">\n    <navigator proportions=\"\" version=\"1\">\n      <foldersAlwaysOnTop value=\"true\" />\n    </navigator>\n    <panes>\n      <pane id=\"ProjectPane\">\n        <subPane>\n          <expand>\n            <path>\n              <item name=\"MoiSklad\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"MoiSklad\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n          </expand>\n          <select />\n        </subPane>\n      </pane>\n      <pane id=\"Scope\" />\n    </panes>\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"vcs.Git\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Python.TeleBotSerman\">\n    <configuration name=\"TeleBotSerman\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"MoiSklad\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/TeleBotSerman.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"agents\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"MoiSklad\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/agents.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"finance\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\n      <module name=\"MoiSklad\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/../../SkillFactory2\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/../../SkillFactory2/Module2_test.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"sp_books\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"MoiSklad\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/sp_books.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"training\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"MoiSklad\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/training.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.TeleBotSerman\" />\n        <item itemvalue=\"Python.training\" />\n        <item itemvalue=\"Python.agents\" />\n        <item itemvalue=\"Python.finance\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"SvnConfiguration\">\n    <configuration />\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"a907a808-9d59-47ce-9c43-12678287e37b\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613670026904</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613670026904</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"finance reports\">\n      <created>1613670234353</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613670234353</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"ToolWindowManager\">\n    <frame x=\"28\" y=\"119\" width=\"1412\" height=\"615\" extended-state=\"0\" />\n    <editor active=\"true\" />\n    <layout>\n      <window_info active=\"true\" content_ui=\"combo\" id=\"Project\" order=\"0\" visible=\"true\" weight=\"0.25839415\" />\n      <window_info id=\"Structure\" order=\"1\" side_tool=\"true\" weight=\"0.25\" />\n      <window_info id=\"Favorites\" order=\"2\" side_tool=\"true\" />\n      <window_info anchor=\"bottom\" id=\"Message\" order=\"0\" />\n      <window_info anchor=\"bottom\" id=\"Find\" order=\"1\" />\n      <window_info anchor=\"bottom\" id=\"Run\" order=\"2\" weight=\"0.32695985\" />\n      <window_info anchor=\"bottom\" id=\"Debug\" order=\"3\" weight=\"0.39961758\" />\n      <window_info anchor=\"bottom\" id=\"Cvs\" order=\"4\" weight=\"0.25\" />\n      <window_info anchor=\"bottom\" id=\"Inspection\" order=\"5\" weight=\"0.4\" />\n      <window_info anchor=\"bottom\" id=\"TODO\" order=\"6\" />\n      <window_info anchor=\"bottom\" id=\"Version Control\" order=\"7\" />\n      <window_info anchor=\"bottom\" id=\"Terminal\" order=\"8\" />\n      <window_info anchor=\"bottom\" id=\"Event Log\" order=\"9\" side_tool=\"true\" weight=\"0.32909092\" />\n      <window_info anchor=\"bottom\" id=\"Python Console\" order=\"10\" />\n      <window_info anchor=\"right\" id=\"Commander\" internal_type=\"SLIDING\" order=\"0\" type=\"SLIDING\" weight=\"0.4\" />\n      <window_info anchor=\"right\" id=\"Ant Build\" order=\"1\" weight=\"0.25\" />\n      <window_info anchor=\"right\" content_ui=\"combo\" id=\"Hierarchy\" order=\"2\" weight=\"0.25\" />\n      <window_info anchor=\"right\" id=\"R Graphics\" order=\"3\" />\n      <window_info anchor=\"right\" id=\"R Packages\" order=\"4\" />\n    </layout>\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"finance reports\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"finance reports\" />\n  </component>\n  <component name=\"editorHistoryManager\">\n    <entry file=\"file://$PROJECT_DIR$/__init__.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/main.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/main_module.py\" />\n    <entry file=\"file://$PROJECT_DIR$/finance.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"413\">\n          <caret line=\"30\" selection-start-line=\"30\" selection-end-line=\"30\" />\n          <folding>\n            <element signature=\"e#0#19#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/config.ini\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"195\">\n          <caret line=\"13\" column=\"55\" selection-start-line=\"13\" selection-start-column=\"55\" selection-end-line=\"13\" selection-end-column=\"55\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/sales_control.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state>\n          <folding>\n            <element signature=\"e#0#19#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/training.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"1710\">\n          <caret line=\"122\" selection-start-line=\"122\" selection-end-line=\"123\" selection-end-column=\"32\" />\n          <folding>\n            <element signature=\"e#23#40#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/api_test.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state>\n          <folding>\n            <element signature=\"e#0#15#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/scrapy_lib.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"-46\">\n          <folding>\n            <element signature=\"e#0#13#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/TeleBotSerman.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"251\">\n          <caret line=\"49\" column=\"100\" lean-forward=\"true\" selection-start-line=\"49\" selection-start-column=\"100\" selection-end-line=\"49\" selection-end-column=\"100\" />\n          <folding>\n            <element signature=\"e#82#96#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Alex_debt.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"2695\">\n          <caret line=\"184\" selection-start-line=\"184\" selection-end-line=\"184\" selection-end-column=\"19\" />\n          <folding>\n            <element signature=\"e#23#38#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/google_books.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"3276\">\n          <caret line=\"230\" column=\"28\" selection-start-line=\"230\" selection-start-column=\"28\" selection-end-line=\"230\" selection-end-column=\"28\" />\n          <folding>\n            <element signature=\"e#0#19#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/google_books.ini\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"165\">\n          <caret line=\"11\" column=\"33\" selection-start-line=\"11\" selection-start-column=\"33\" selection-end-line=\"11\" selection-end-column=\"33\" />\n        </state>\n      </provider>\n    </entry>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 449c5e578b062f57934ebdb03474dda9eeace90a)
+++ b/.idea/workspace.xml	(date 1617202792000)
@@ -2,6 +2,8 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="a907a808-9d59-47ce-9c43-12678287e37b" name="Default Changelist" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/agents.py" beforeDir="false" afterPath="$PROJECT_DIR$/agents.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/bot_log.txt" beforeDir="false" afterPath="$PROJECT_DIR$/bot_log.txt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -75,7 +77,7 @@
     <property name="last_opened_file_path" value="$PROJECT_DIR$" />
     <property name="settings.editor.selected.configurable" value="vcs.Git" />
   </component>
-  <component name="RunManager" selected="Python.TeleBotSerman">
+  <component name="RunManager" selected="Python.agents">
     <configuration name="TeleBotSerman" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="MoiSklad" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -183,9 +185,9 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.agents" />
         <item itemvalue="Python.TeleBotSerman" />
         <item itemvalue="Python.training" />
-        <item itemvalue="Python.agents" />
         <item itemvalue="Python.finance" />
       </list>
     </recent_temporary>
